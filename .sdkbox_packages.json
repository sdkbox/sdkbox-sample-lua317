{
    "iap": {
        "engine": "3", 
        "name": "iap", 
        "args": {
            "patcherrors": 0, 
            "leavetemps": 0, 
            "noupdate": 0, 
            "nopatchingcpp": 0, 
            "remote": 1, 
            "verbose": 0, 
            "forcecopy": 0, 
            "nohelp": 1, 
            "days": 10, 
            "forcedownload": 0, 
            "server": "download.sdkbox.com/installer/v1/", 
            "project": "./", 
            "command": "import", 
            "alwaysupdate": 0, 
            "installer": "", 
            "manifest": "manifest.json", 
            "local": 0, 
            "nopatching": 0, 
            "jsonapi": 0
        }, 
        "version": [
            2, 
            7, 
            6, 
            1
        ], 
        "result": "ok", 
        "message": "success", 
        "constants": {
            "ANDROID_STUDIO_JNI_DIR": "frameworks/runtime-src/proj.android/app/jni/", 
            "COCOS_2DX_VERSION": "3.17.0", 
            "remove_jar": "frameworks/runtime-src/proj.android/app/libs/PluginGooglePlay.jar/", 
            "VS_PROJECT_DIR": "n/a", 
            "COCOS_2DX_INSTALLATION_VERSION": "3.17.0", 
            "proguard_rules": "frameworks/runtime-src/proj.android/app/proguard-rules.pro", 
            "file": "SDKBoxLuaHelper.cpp", 
            "ANDROID_COCOS_PACKAGE_ROOT": "frameworks/runtime-src/proj.android/app/", 
            "replace_pattern": "com\\.android\\.billingclient:billing:\\d+(\\.\\d+){0,2}", 
            "replace_code": "com.android.billingclient:billing:3.0.2", 
            "ANDROID_STUDIO_ACTIVITY_NAME": "AppActivity", 
            "CCC_ENGINE_VERSION": "n/a", 
            "proguard_file": "n/proguard-project.txt", 
            "ANDROID_STUDIO_PROJECT_DIR": "frameworks/runtime-src/proj.android/", 
            "VS_PROJECT_SLN_FILE": "n/a", 
            "content": "/****************************************************************************\n Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.\n \n http://www.cocos2d-x.org\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n \n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n \n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n ****************************************************************************/\n\n#include \"AppDelegate.h\"\n#include \"scripting/lua-bindings/manual/CCLuaEngine.h\"\n#include \"cocos2d.h\"\n#include \"scripting/lua-bindings/manual/lua_module_register.h\"\n\n// #define USE_AUDIO_ENGINE 1\n// #define USE_SIMPLE_AUDIO_ENGINE 1\n\n#if USE_AUDIO_ENGINE && USE_SIMPLE_AUDIO_ENGINE\n#error \"Don't use AudioEngine and SimpleAudioEngine at the same time. Please just select one in your game!\"\n#endif\n\n#if USE_AUDIO_ENGINE\n#include \"audio/include/AudioEngine.h\"\nusing namespace cocos2d::experimental;\n#elif USE_SIMPLE_AUDIO_ENGINE\n#include \"audio/include/SimpleAudioEngine.h\"\nusing namespace CocosDenshion;\n#endif\n\nUSING_NS_CC;\nusing namespace std;\n\nAppDelegate::AppDelegate()\n{\n}\n\nAppDelegate::~AppDelegate()\n{\n#if USE_AUDIO_ENGINE\n    AudioEngine::end();\n#elif USE_SIMPLE_AUDIO_ENGINE\n    SimpleAudioEngine::end();\n#endif\n\n#if (COCOS2D_DEBUG > 0) && (CC_CODE_IDE_DEBUG_SUPPORT > 0)\n    // NOTE:Please don't remove this call if you want to debug with Cocos Code IDE\n    RuntimeEngine::getInstance()->end();\n#endif\n\n}\n\n// if you want a different context, modify the value of glContextAttrs\n// it will affect all platforms\nvoid AppDelegate::initGLContextAttrs()\n{\n    // set OpenGL context attributes: red,green,blue,alpha,depth,stencil,multisamplesCount\n    GLContextAttrs glContextAttrs = {8, 8, 8, 8, 24, 8, 0 };\n\n    GLView::setGLContextAttrs(glContextAttrs);\n}\n\n// if you want to use the package manager to install more packages, \n// don't modify or remove this function\nstatic int register_all_packages()\n{\n    return 0; //flag for packages manager\n}\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    // set default FPS\n    Director::getInstance()->setAnimationInterval(1.0 / 60.0f);\n\n    // register lua module\n    auto engine = LuaEngine::getInstance();\n    ScriptEngineManager::getInstance()->setScriptEngine(engine);\n    lua_State* L = engine->getLuaStack()->getLuaState();\n    lua_module_register(L);\n\n    register_all_packages();\n\n    LuaStack* stack = engine->getLuaStack();\n    stack->setXXTEAKeyAndSign(\"2dxLua\", strlen(\"2dxLua\"), \"XXTEA\", strlen(\"XXTEA\"));\n\n    //register custom function\n    //LuaStack* stack = engine->getLuaStack();\n    //register_custom_function(stack->getLuaState());\n    \n#if CC_64BITS\n    FileUtils::getInstance()->addSearchPath(\"src/64bit\");\n#endif\n    FileUtils::getInstance()->addSearchPath(\"src\");\n    FileUtils::getInstance()->addSearchPath(\"res\");\n    if (engine->executeScriptFile(\"main.lua\"))\n    {\n        return false;\n    }\n\n    return true;\n}\n\n// This function will be called when the app is inactive. Note, when receiving a phone call it is invoked.\nvoid AppDelegate::applicationDidEnterBackground()\n{\n    Director::getInstance()->stopAnimation();\n\n#if USE_AUDIO_ENGINE\n    AudioEngine::pauseAll();\n#elif USE_SIMPLE_AUDIO_ENGINE\n    SimpleAudioEngine::getInstance()->pauseBackgroundMusic();\n    SimpleAudioEngine::getInstance()->pauseAllEffects();\n#endif\n}\n\n// this function will be called when the app is active again\nvoid AppDelegate::applicationWillEnterForeground()\n{\n    Director::getInstance()->startAnimation();\n\n#if USE_AUDIO_ENGINE\n    AudioEngine::resumeAll();\n#elif USE_SIMPLE_AUDIO_ENGINE\n    SimpleAudioEngine::getInstance()->resumeBackgroundMusic();\n    SimpleAudioEngine::getInstance()->resumeAllEffects();\n#endif\n}\n", 
            "COCOS_PROJECT_HINT": "frameworks/runtime-src/", 
            "ANDROID_STUDIO_PROPERTIES": "frameworks/runtime-src/proj.android/app/project.properties/", 
            "VS_PROJECT_PROJ_FILE": "n/a", 
            "COCOS_ENGINE_TYPE": "unknown", 
            "ANDROID_PROJECT_DIR": "n/a", 
            "ANDROID_COCOS_SRC_DIR": "frameworks/runtime-src/proj.android/app/src/org/cocos2dx/lib/", 
            "COCOS_PROJECT_DIR": "./", 
            "COCOS_CLASSES_DIR": "frameworks/runtime-src/Classes/", 
            "XCODE_PROJECT": "frameworks/runtime-src/proj.ios_mac/luaTest317.xcodeproj/project.pbxproj", 
            "COCOS_ENGINE_MAKER": "cocos2d-x", 
            "ANDROID_STUDIO_ACTIVITY_PATH": "frameworks/runtime-src/proj.android/app/src/org/cocos2dx/lua/", 
            "lua_sources": [
                "PluginIAPLua.hpp", 
                "PluginIAPLua.cpp", 
                "PluginIAPLuaHelper.cpp", 
                "PluginIAPLuaHelper.h", 
                "SDKBoxLuaHelper.h", 
                "SDKBoxLuaHelper.cpp"
            ], 
            "ANDROID_SDK_DIR": "n/a", 
            "COCOS_2DX_ROOT": "/Users/hugo/Documents/work/cocos2d-x/", 
            "insert_code": "dependencies { compile 'com.android.billingclient:billing:3.0.2' }\n", 
            "ANDROID_MANIFEST": "n/a", 
            "ANDROID_STUDIO_MANIFEST": "frameworks/runtime-src/proj.android/app/AndroidManifest.xml", 
            "ANDROID_JNI_DIR": "n/a", 
            "IOS_PROJECT_DIR": "frameworks/runtime-src/proj.ios_mac/", 
            "XCODE_PROJECT_CXX_LIBRARY": "libc++", 
            "ANDROID_STUDIO_MK": "frameworks/runtime-src/proj.android/app/jni/Android.mk", 
            "XCODE_PROJECT_DIR": "frameworks/runtime-src/proj.ios_mac/luaTest317.xcodeproj/", 
            "ANDROID_MK_USES_WILDCARDS": "n/a", 
            "COCOS_BACKUP_DIR": "backup-2021-06-18/", 
            "ANDROID_PROPERTIES": "n/a", 
            "SDKBOX_PACKAGE_NAME": "iap", 
            "COCOS_RESOURCES_DIR": "res/", 
            "ANDROID_STUDIO_LIBS_DIR": "frameworks/runtime-src/proj.android/app/libs/", 
            "SDKBOX_PLUGIN_NAME": "IAP", 
            "ANDROID_LIBS_DIR": "frameworks/runtime-src/proj.android/app/libs/", 
            "lines": [
                "#ifdef SDKBOX_ENABLED", 
                "    register_all_PluginIAPLua(LuaEngine::getInstance()->getLuaStack()->getLuaState());", 
                "    register_all_PluginIAPLua_helper(LuaEngine::getInstance()->getLuaStack()->getLuaState());", 
                "#endif", 
                "#ifdef SDKBOX_ENABLED", 
                "    register_all_sdkbox(LuaEngine::getInstance()->getLuaStack()->getLuaState());", 
                "#endif"
            ], 
            "ANDROID_MK": "n/a", 
            "APPLICATION_MK": "n/a"
        }
    }
}